{
    "collab_server" : "",
    "contents" : "#### Clean up the data by removing FIT_FAILED ####\ndata$Neutral <- as.numeric(gsub(\"FIT_FAILED\", NA, data$Neutral))\ndata$Happy <- as.numeric(gsub(\"FIT_FAILED\", NA, data$Happy))\ndata$Sad <- as.numeric(gsub(\"FIT_FAILED\", NA, data$Sad))\ndata$Angry <- as.numeric(gsub(\"FIT_FAILED\", NA, data$Angry))\ndata$Surprised <- as.numeric(gsub(\"FIT_FAILED\", NA, data$Surprised))\ndata$Scared <- as.numeric(gsub(\"FIT_FAILED\", NA, data$Scared))\ndata$Disgusted <- as.numeric(gsub(\"FIT_FAILED\", NA, data$Disgusted))\ndata$Valence <- as.numeric(gsub(\"FIT_FAILED\", NA, data$Valence))\ndata$Arousal <- as.numeric(gsub(\"FIT_FAILED\", NA, data$Arousal))\n\n# Now for action units...\n# AU 6; AU 12\ndata$AU6 <- gsub(\"FIT_FAILED\", NA, data$Action.Unit.06...Cheek.Raiser)\n#data$AU6 <- gsub(\"NotActive\", 0, data$Action.Unit.06...Cheek.Raiser)\ndata$AU6 <- ifelse(data$AU6==\"A\", 1,\n              ifelse(data$AU6==\"B\", 2,\n                   ifelse(data$AU6==\"C\", 3,\n                          ifelse(data$AU6==\"D\", 4,\n                                 ifelse(data$AU6==\"E\", 5, 0)))))\n\ndata$AU12 <- gsub(\"FIT_FAILED\", NA, data$Action.Unit.12...Lip.Corner.Puller)\n#data$AU12 <- gsub(\"NotActive\", 0, data$Action.Unit.12...Lip.Corner.Puller)\ndata$AU12 <- ifelse(data$AU12==\"A\", 1,\n                   ifelse(data$AU12==\"B\", 2,\n                          ifelse(data$AU12==\"C\", 3,\n                                 ifelse(data$AU12==\"D\", 4,\n                                        ifelse(data$AU12==\"E\", 5, 0)))))\n\n#### Get some time variables that make sense ####\ndata$Time <- strptime(data$Video.Time, \"%H:%M:%OS\")\nop <- options(digits.secs=3)\nhead(data$Time)\n\n# Make time numeric so that it is easier to work with\ndata$Time2 <- as.numeric(data$Video.Time)\n\n# The sample rate was 30 fps, so let's divide the data by epochs of 15s\nsample.rate <- 30\n# Epochs in seconds\nepoch <- 15\n# Max values for each epoch\nepoch1 <- epoch*sample.rate\nepoch2 <- (epoch*2)*sample.rate\nepoch3 <- (epoch*3)*sample.rate\nepoch4 <- (epoch*4)*sample.rate\n\ndata$epoch <- ifelse(data$Time2 < epoch1, \"15s\", \n                     ifelse((data$Time2 > epoch1 & data$Time2 <= epoch2), \"30s\",\n                            ifelse((data$Time2 > epoch2 & data$Time2 <= epoch3), \"45s\",\n                                   ifelse((data$Time2 > epoch3 & data$Time2 <= epoch4), \"60s\",\n                                          ifelse(data$Time2 > epoch4, \"60s+\",NA)))))\n\ndata$epoch <- as.factor(data$epoch)\n\n#### Get a graphical representation for each emotion at each epoch ####\n# Reshape and extract the data for easier analysis\nifelse(require(reshape2),\n       library(reshape2), \n       install.packages(\"reshape2\"))\n  \nkeep_cols <- c(\"Neutral\",\n               \"Happy\",\n               \"Sad\",\n               \"Angry\",\n               \"Surprised\",\n               \"Scared\",\n               \"Disgusted\",\n               \"Valence\",\n               \"Arousal\",\n               \"subject_id\",\n               \"analysis\",\n               \"condition\",\n               \"AU6\",\n               \"AU12\",\n               \"epoch\"\n               )\n\ndata.temp <- data[,keep_cols]\ndata2 <- na.omit(data.temp)\ndata2 <- melt(data.temp, id.vars=c(\"subject_id\", \"condition\", \"analysis\", \"epoch\"))\n\n# Deal with NAs\n### remove NAs\nrow.has.na <- apply(data2, 1, function(x){any(is.na(x))})\n### shows you how many missing values you have\nsum(row.has.na)\n### then remove any row that will have an NA in any column\ndata2 <- data2[!row.has.na,]\n\n\n#Some mid-script cleaning\nrm(data.temp, files_list, keep_cols)\n\n\n# Obtain summary statistics\n# In this case, we want mean values for each emotion at each epoch for each subject\nifelse(require(Rmisc),\n       library(Rmisc), \n       install.packages(\"Rmisc\"))\n\n# Here is the data frame for summary statistics by participant, analysis, emotion, and epoch\n# But, we can't graph over multiple participants easily...\ndsum <- summarySEwithin(data = data2, \n                        measurevar = \"value\",\n                        withinvars = c(\"analysis\",\"variable\",\"epoch\"),\n                        betweenvars = c(\"subject_id\",\"condition\"), idvar = \"subject_id\",\n                        na.rm = TRUE)\n\n### Map visually, say, AU6 for each video\nifelse(require(ggplot2),\n       library(ggplot2), \n       install.packages(\"ggplot2\"))\n\n# We extract the AU6 variable from our summary data\ndsum.AU6 <- subset(dsum, variable == \"AU6\")\n# Then we want to collapse over participant for easier graphing\ndsum.AU6 <- ddply(dsum.AU6, c(\"analysis\", \"epoch\"), summarise, value=mean(value))\n\n# Then graph it!\nplot1 <- ggplot(dsum.AU6, aes(x=epoch, y=value, colour=analysis, group = analysis)) +\n            geom_point() +\n            geom_path()\nplot1\n\n\n### A Plot grid by emotion so we can visually inspect all of them...\n#### NOT RUN ####\n# ifelse(require(lattice),\n#        library(lattice), \n#        install.packages(\"lattice\"))\n# \n# x.tick.number <- 10\n# at <- seq(1, nrow(dsum), length.out=x.tick.number)\n# labels <- round(seq(10.0,49.5, length.out=x.tick.number))\n# \n# xyplot(value ~ epoch | variable, group = analysis, dsum, t='l', auto.key = list(space=\"right\"),\n#        scales=list(tck=1:0, relation=\"free\"))\n# \n# \n# #### Some sample statistics... ####\n# contrasts(dsum.D$epoch) <- contr.poly(5)\n# \n# fit1 <- lm(value~analysis+epoch, data=dsum.D)\n# summary(fit1)\n#### END NOT RUN ####\n\n",
    "created" : 1460647719736.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "613868765",
    "id" : "15267332",
    "lastKnownWriteTime" : 1460646888,
    "last_content_update" : 1460646888,
    "path" : "~/Documents/School Work/FaceReader-R-tools/multi-variable_scripts/script_new.R",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 4,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}